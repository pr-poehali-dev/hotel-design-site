import { BookingRecord } from '@/types/booking';
import { bookingsAPI } from '@/api/bookings';

interface UseReportsActionsProps {
  selectedApartment: string;
  bookings: BookingRecord[];
  setLoading: (loading: boolean) => void;
  loadBookings: () => Promise<void>;
  loadMonthlyReports: () => Promise<void>;
}

export const useReportsActions = ({
  selectedApartment,
  bookings,
  setLoading,
  loadBookings,
  loadMonthlyReports
}: UseReportsActionsProps) => {
  
  const handleSaveBooking = async (booking: BookingRecord, editingBooking?: BookingRecord) => {
    setLoading(true);
    try {
      const bookingWithApartment = { ...booking, apartmentId: selectedApartment };
      if (editingBooking) {
        await bookingsAPI.updateBooking(bookingWithApartment);
      } else {
        await bookingsAPI.createBooking(bookingWithApartment);
      }
      await loadBookings();
    } catch (error) {
      console.error('Failed to save booking:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteBooking = async (id: string) => {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?')) {
      setLoading(true);
      try {
        await bookingsAPI.deleteBooking(id, selectedApartment);
        await loadBookings();
      } catch (error) {
        console.error('Failed to delete booking:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
      } finally {
        setLoading(false);
      }
    }
  };

  const handleMarkAsPaid = async (booking: BookingRecord) => {
    if (!confirm(`–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É ${booking.ownerFunds.toLocaleString('ru')} ‚ÇΩ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é?`)) {
      return;
    }
    
    setLoading(true);
    try {
      await bookingsAPI.updateBooking({
        ...booking,
        paymentStatus: 'paid',
        paymentCompletedAt: new Date().toISOString(),
        apartmentId: selectedApartment
      });
      await loadBookings();
      alert('‚úÖ –í—ã–ø–ª–∞—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è');
    } catch (error) {
      console.error('Failed to mark as paid:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–ª–∞—Ç—ã');
    } finally {
      setLoading(false);
    }
  };

  const handleArchiveMonth = async () => {
    const now = new Date();
    const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
    const reportMonth = `${lastMonth.getFullYear()}-${String(lastMonth.getMonth() + 1).padStart(2, '0')}`;
    
    const monthName = lastMonth.toLocaleDateString('ru', { year: 'numeric', month: 'long' });
    
    if (!confirm(`–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç—ã –≤—Å–µ—Ö –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –∑–∞ ${monthName}?\n\n–≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –∞—Ä—Ö–∏–≤ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞ –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤.`)) {
      return;
    }
    
    setLoading(true);
    try {
      const response = await fetch('https://functions.poehali.dev/463e593e-5863-4107-a36c-c825da3844fd', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      const data = await response.json();
      
      if (response.ok && data.success) {
        alert(`‚úÖ –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: ${data.archivedCount}\n–ü–µ—Ä–∏–æ–¥: ${monthName}`);
        await loadMonthlyReports();
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    } catch (error) {
      console.error('Failed to archive month:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞');
    } finally {
      setLoading(false);
    }
  };

  const handleSendReport = (booking: BookingRecord) => {
    if (!booking.guestEmail) {
      alert('–ù–µ —É–∫–∞–∑–∞–Ω email –≥–æ—Å—Ç—è');
      return;
    }
    
    const subject = `–û—Ç—á–µ—Ç –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é ${booking.checkIn} - ${booking.checkOut}`;
    const body = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${booking.guestName || '–£–≤–∞–∂–∞–µ–º—ã–π –≥–æ—Å—Ç—å'}!

–ù–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–º –æ—Ç—á–µ—Ç –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é:

–ü–µ—Ä–∏–æ–¥: ${booking.checkIn} - ${booking.checkOut}
–°—É–º–º–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: ${booking.accommodationAmount.toLocaleString('ru')} ‚ÇΩ
–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${booking.totalAmount.toLocaleString('ru')} ‚ÇΩ
${booking.earlyCheckIn > 0 ? `–†–∞–Ω–Ω–∏–π –∑–∞–µ–∑–¥: ${booking.earlyCheckIn.toLocaleString('ru')} ‚ÇΩ\n` : ''}${booking.lateCheckOut > 0 ? `–ü–æ–∑–¥–Ω–∏–π –≤—ã–µ–∑–¥: ${booking.lateCheckOut.toLocaleString('ru')} ‚ÇΩ\n` : ''}${booking.parking > 0 ? `–ü–∞—Ä–∫–∏–Ω–≥: ${booking.parking.toLocaleString('ru')} ‚ÇΩ\n` : ''}
–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
Premium Apartments`;

    window.location.href = `mailto:${booking.guestEmail}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
  };

  const handleShowAllToOwner = async () => {
    console.log('üöÄ handleShowAllToOwner –≤—ã–∑–≤–∞–Ω–∞');
    console.log('–í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', bookings.length);
    console.log('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', bookings);
    
    const hiddenCount = bookings.filter(b => !b.showToGuest).length;
    console.log('–°–∫—Ä—ã—Ç—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', hiddenCount);
    
    if (hiddenCount === 0) {
      alert('–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –≤–∏–¥–Ω—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É');
      return;
    }
    
    if (!confirm(`–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É ${hiddenCount} —Å–∫—Ä—ã—Ç—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π?`)) {
      return;
    }
    
    setLoading(true);
    try {
      const hiddenBookings = bookings.filter(b => !b.showToGuest);
      console.log('–û–±–Ω–æ–≤–ª—è—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', hiddenBookings.length);
      console.log('–°–∫—Ä—ã—Ç—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', hiddenBookings);
      
      if (hiddenBookings.length === 0) {
        alert('‚ö†Ô∏è –ù–µ—Ç —Å–∫—Ä—ã—Ç—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        setLoading(false);
        return;
      }
      
      let successCount = 0;
      let failedCount = 0;
      
      for (const booking of hiddenBookings) {
        try {
          console.log('–û–±–Ω–æ–≤–ª—è—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', booking.id);
          await bookingsAPI.updateBooking({ 
            ...booking, 
            showToGuest: true, 
            apartmentId: selectedApartment 
          });
          successCount++;
          console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ:', booking.id);
        } catch (err) {
          failedCount++;
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', booking.id, err);
        }
      }
      
      await loadBookings();
      
      if (failedCount > 0) {
        alert(`‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${failedCount}`);
      } else {
        alert(`‚úÖ ${successCount} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É`);
      }
    } catch (error: any) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'}`);
    } finally {
      setLoading(false);
    }
  };

  const handleSyncBnovo = async () => {
    if (!confirm('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Bnovo?\n\n–≠—Ç–æ –æ–±–Ω–æ–≤–∏—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞—Å—Ç —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≥–æ—Å—Ç–µ–π.')) {
      return;
    }
    
    setLoading(true);
    try {
      const response = await fetch('https://functions.poehali.dev/2faa4887-dddc-4f5a-8a48-3073dd398dbd', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      const data = await response.json();
      
      if (response.ok && data.success) {
        alert(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${data.synced_bookings}\n–ì–æ—Å—Ç–µ–π —Å–æ–∑–¥–∞–Ω–æ: ${data.created_guests}\n–ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ–±–Ω–æ–≤–ª—ë–Ω: ${data.updated_calendar} –∑–∞–ø–∏—Å–µ–π`);
        await loadBookings();
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    } catch (error) {
      console.error('Failed to sync with Bnovo:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Bnovo');
    } finally {
      setLoading(false);
    }
  };

  return {
    handleSaveBooking,
    handleDeleteBooking,
    handleMarkAsPaid,
    handleArchiveMonth,
    handleSendReport,
    handleShowAllToOwner,
    handleSyncBnovo
  };
};