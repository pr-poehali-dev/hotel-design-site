import { useState, useEffect } from 'react';
import { CleaningRecord } from '@/components/housekeeping/types';
import func2url from '../../backend/func2url.json';

const API_URL = func2url['cleaning-history'];

export const useCleaningRecords = () => {
  console.log('üéØ useCleaningRecords HOOK CALLED');
  const [records, setRecords] = useState<CleaningRecord[]>([]);
  const [loading, setLoading] = useState(true);
  console.log('üéØ Current records state:', records);
  
  // –í–†–ï–ú–ï–ù–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º API_URL –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä—è–º–æ –≤ DOM
  if (typeof window !== 'undefined' && !window.__CLEANING_RECORDS_HOOK_INIT__) {
    window.__CLEANING_RECORDS_HOOK_INIT__ = true;
    console.error('üî¥üî¥üî¥ API_URL:', API_URL);
    
    // –°–æ–∑–¥–∞—ë–º –≤–∏–¥–∏–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const debugDiv = document.createElement('div');
    debugDiv.id = 'cleaning-records-debug';
    debugDiv.style.cssText = 'position:fixed;top:0;left:0;right:0;background:red;color:white;padding:20px;z-index:999999;font-size:16px;font-family:monospace;';
    debugDiv.innerHTML = `
      <strong>üî¥ HOOK INIT DEBUG:</strong><br>
      API_URL: ${API_URL}<br>
      Time: ${new Date().toISOString()}
    `;
    document.body.appendChild(debugDiv);
  }

  const loadRecords = async () => {
    console.error('üöÄüöÄüöÄ loadRecords START. API_URL:', API_URL);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const updateDebug = (msg: string, color = 'orange') => {
      const debugDiv = document.getElementById('cleaning-records-debug');
      if (debugDiv) {
        debugDiv.style.background = color;
        debugDiv.innerHTML += `<br>${msg}`;
      }
    };
    
    updateDebug('üöÄ loadRecords START');
    setLoading(true);
    try {
      updateDebug(`üåê Fetch –∫: ${API_URL}`);
      console.error('üåêüåêüåê –î–µ–ª–∞—é fetch –∑–∞–ø—Ä–æ—Å –∫:', API_URL);
      const response = await fetch(API_URL, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });
      
      updateDebug(`üì° Response: ${response.status}`);
      console.error('üì°üì°üì° Response status:', response.status, 'OK:', response.ok);
      
      const data = await response.json();
      
      updateDebug(`üì• Records: ${data.records?.length || 0}`);
      console.error('üì•üì•üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î:', data);
      console.error('üìä data.success:', data.success);
      console.error('üìä data.records:', data.records);
      console.error('üìä data.records.length:', data.records?.length);
      
      if (data.success && data.records) {
        console.error('‚úÖ‚úÖ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é records. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', data.records.length);
        setRecords(data.records);
        updateDebug(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${data.records.length} –∑–∞–ø–∏—Å–µ–π`, 'green');
      } else {
        console.error('‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è data.success –∏–ª–∏ data.records –ø—É—Å—Ç—ã–µ!');
        updateDebug('‚ö†Ô∏è data –ø—É—Å—Ç—ã–µ!', 'orange');
      }
    } catch (error) {
      console.error('‚ùå‚ùå‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —É–±–æ—Ä–æ–∫:', error);
      updateDebug(`‚ùå ERROR: ${error}`, 'red');
    }
    setLoading(false);
    console.error('üèÅüèÅüèÅ loadRecords END');
  };

  useEffect(() => {
    console.error('üî•üî•üî• useEffect –∑–∞–ø—É—â–µ–Ω –≤ useCleaningRecords');
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    const oldRecords = localStorage.getItem('cleaning_records');
    if (oldRecords) {
      console.error('üóëÔ∏è –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage');
      localStorage.removeItem('cleaning_records');
    }
    
    console.error('üî• –í—ã–∑—ã–≤–∞—é loadRecords()');
    loadRecords();
  }, []);

  const addCleaningRecord = async (roomNumber: string, housekeeperName: string, payment: number) => {
    console.log('üîî addCleaningRecord called:', { 
      roomNumber,
      housekeeperName,
      payment
    });
    
    try {
      const response = await fetch(API_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          roomNumber,
          housekeeperName,
          payment
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        console.log('‚úÖ –ó–∞–ø–∏—Å—å –æ–± —É–±–æ—Ä–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î. ID:', data.id);
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        await loadRecords();
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', data.error);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
  };

  const markAsPaid = async (recordId: string) => {
    await updatePaymentStatus(recordId, 'paid');
  };

  const updatePaymentStatus = async (recordId: string, status: 'paid' | 'unpaid', paidAt?: string) => {
    try {
      const response = await fetch(API_URL, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id: recordId,
          paymentStatus: status,
          paidAt
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        await loadRecords();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã:', error);
    }
  };

  const getRecordsByHousekeeper = (housekeeperName: string) => {
    return records.filter(r => r.housekeeperName === housekeeperName);
  };

  const deleteRecord = async (recordId: string) => {
    try {
      const response = await fetch(API_URL, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: recordId })
      });
      
      const data = await response.json();
      
      if (data.success) {
        console.log('‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞. ID:', recordId);
        await loadRecords();
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', data.error);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
    }
  };

  return {
    records,
    loading,
    addCleaningRecord,
    markAsPaid,
    updatePaymentStatus,
    getRecordsByHousekeeper,
    deleteRecord,
    reload: loadRecords
  };
};